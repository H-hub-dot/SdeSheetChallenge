/************************************************************************Count Inversions*****************************************************************************/

#include <bits/stdc++.h> 
long long merge(long long arr[],long long temp[],long long l,long long m,long long r)
{
    long long invcnt=0;
    long long i=l,j=m,k=l;
    
    while(i<=m-1&&j<=r)
    {
        if(arr[i]<=arr[j])
        temp[k++]=arr[i++];
        else
        {
            temp[k++]=arr[j++];
            invcnt+=(m-i);
        }
    }
    
    while(i<=m-1)
    {
        temp[k++]=arr[i++];
    }
    
    while(j<=r)
    temp[k++]=arr[j++];
    
    for(i=l;i<=r;i++)
    arr[i]=temp[i];
    
    return invcnt;
    
}
long long mergesort(long long arr[],long long temp[],long long l,long long r)
{
    long long cntinv=0;
    if(l<r)
    {
        int m=(l+r)/2;
        cntinv+=mergesort(arr,temp,l,m);
        cntinv+=mergesort(arr,temp,m+1,r);
        cntinv+=merge(arr,temp,l,m+1,r);
    }
    
    return cntinv;
    
}
long long int getInversions(long long arr[], long long n)
{
    // Your Code Here
    long long temp[n];
    return mergesort(arr,temp,0,n-1);
}
